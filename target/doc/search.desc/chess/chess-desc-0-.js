searchState.loadedDescShard("chess", 0, "BitBoard courtesy of: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne player has been checkmated. Stores the color of the …\nStores the game state, including the board position, turn …\nRepresents the current state of a game.\nChecks if the given piece belongs to the current player.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the game is over (not ongoing).\nReturns which player’s turn it is based on the turn …\nPosition of all pieces currently on the board.\nSelects a piece on the given square, if it belongs to the …\nAn optional pair of the currently selected piece and its …\nCurrent turn number (1 = White’s first move, 2 = …\nIncrements the turn counter by one.\nConverts a bit index (0..63) to chess notation, e.g., 0 -&gt; …\nInitializes a chessboard to the standard starting position.\nPrints the current board state in a human-readable format …\nConverts chess notation (“A1”..“H8”) to bit index …\nApplies a move directly to the given position without …\nReturns <code>true</code> if the given color’s king is in check.\nReturns <code>true</code> if the given color is checkmated.\nReturns <code>true</code> if the given color is stalemated.\nGenerates all legal moves for the given color.\nAttempts to make a move in the given game.\nUpdates castling rights in the given position after a move.\nRepresents a chess move on the board.\nEquality ignores the piece type and promotion flag. Only …\nReturns the argument unchanged.\nThe starting square index (0–63).\nCalls <code>U::from(self)</code>.\nThe piece being moved (including color).\nReturns side indices for a piece.\nWhether this move resulted from a pawn promotion.\nThe target square index (0–63).\nGenerates pseudo-legal bishop moves from a square.\nGenerates pseudo-legal king moves from a square.\nGenerates pseudo-legal knight moves from a square.\nReturns all pseudo-legal moves for the given piece on the …\nGenerates pseudo-legal pawn moves from a square.\nGenerates pseudo-legal queen moves from a square.\nGenerates pseudo-legal rook moves from a square.\nReturns the color of the piece.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>CastlingRights</code> with all rights available (no …\nConstants representing the piece types.\nRepresents the state of the chessboard using bitboards.\nConstants representing the two sides in a chess game.\nBitboards for each piece type, separated by side.\nBitboards for all occupied squares, separated by side.\nThe en passant target square, if available.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the piece (if any) at a given square in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates <em>pseudo-legal</em> castling moves for a king, if …\nChecks whether a pawn move reaches its promotion rank.\nReturns the possible promotion pieces for a pawn that …")